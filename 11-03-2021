import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import math
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Conv2D,Flatten,MaxPool2D,Dropout

#1
(x_train,y_train),(x_test,y_test) = tf.keras.datasets.mnist.load_data()
x_train = x_train.reshape(-1,28,28,1)
x_test = x_test.reshape(-1,28,28,1)
#print(x_train.shape)
#print(y_train.shape)
#print(x_test.shape)
#print(y_test.shape)

#2
def display_stats():
    plt.hist(y_train,rwidth=0.9, bins=10)
    plt.show()
    
#display_stats()

#3
def display_img(img):
    imgplot = plt.imshow(img)
    plt.show()
    
#display_img(x_train[1])

#4
def display_each_img(x_train,y_train):
    print(y_train)
    compteur=0
    y_train = list(y_train)
    
    for y in y_train:
        if y == compteur:
            compteur+=1
            display_img(x_train[y_train.index(y)])
        elif compteur == 10:
            return
            
        
#display_each_img(x_train,y_train)
def normalize(datas):
    x_max = datas.max()
    datas = datas/x_max
    return datas

x_train = normalize(x_train)
x_test = normalize(x_test)

#5
y_train = to_categorical(y_train, 10) #10 -> nbre de chiffres
y_test = to_categorical(y_test, 10)

print(y_train[0])


#dÃ©finition du model
#Conv2D = convolution && MaxPool2D = poling

models = keras.models.Sequential()
models.add(
    Conv2D(
        filters = 32, 
        kernel_size = (3,3),
        input_shape = (28,28, 1),
        activation = "relu"
    )
)

models.add(
    MaxPool2D(
        pool_size = (2,2)
    )
)

models.add(
    Conv2D(
        filters = 64, 
        kernel_size = (3,3),
        input_shape = (28,28, 1),
        activation = "relu"
    )
)

models.add(
    MaxPool2D(
        pool_size = (2,2)
    )
)


models.add(
    Conv2D(
        filters = 128, 
        kernel_size = (3,3),
        input_shape = (28,28, 1),
        activation = "relu"
    )
)

models.add(
    MaxPool2D(
        pool_size = (2,2)
    )
)


models.add(Flatten())

# Couche dense de neurone
# 0.5 -> unable neurone 64
models.add(Dense(128, activation = "relu"))
models.add(Dropout(0.5))

# Couche de sortie
models.add(Dense(10, activation = "softmax"))

models.compile(
    optimizer = "adam",
    loss = "categorical_crossentropy",
    metrics = ["accuracy"]
)

models.summary()
